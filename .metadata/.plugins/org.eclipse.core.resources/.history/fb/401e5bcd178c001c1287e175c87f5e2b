package com.vobi.bank.services;

import java.util.List;
import java.util.Optional;

import javax.validation.Validator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.vobi.bank.domain.Customer;
import com.vobi.bank.respository.CustomerRepository;

@Service
public class CustomerServiceImpl implements CustomerService {

	@Autowired
	CustomerRepository customerRepository;
	
	@Autowired
	Validator validator;
	
	@Override
	@Transactional(readOnly = true)
	public List<Customer> findAll() {
		return customerRepository.findAll();
	}

	@Override
	@Transactional(readOnly = true)
	public Optional<Customer> findById(Integer id) {
		return customerRepository.findById(id);
	}
	
	@Override
	@Transactional(readOnly = true)
	public Long count() {
		return customerRepository.count();
	}

	@Override
	@Transactional(readOnly = false,propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public Customer save(Customer entity) throws Exception {
		if(entity == null) {
			throw new Exception();
		}
		validate(entity);
		
		if(customerRepository.existsById(entity.getCustId())) {
			throw new Exception("El cliente ya existe");
		}
		
		return customerRepository.save(entity);
	}	

	@Override
	@Transactional(readOnly = false,propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public Customer update(Customer entity) throws Exception {
		if(entity == null) {
			throw new Exception();
		}
		validate(entity);
		
		if(customerRepository.existsById(entity.getCustId())== false) {
			throw new Exception("El cliente no existe");
		}
		
		return customerRepository.save(entity);
	}	
	
	@Override
	@Transactional(readOnly = false,propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public void delete(Customer entity) throws Exception {
		if(entity == null) {
			throw new Exception();
		}
		validate(entity);
		
		if(entity.getCustId()==null) {
			throw new Exception("El cliente id es nulo");
		}
		if(customerRepository.existsById(entity.getCustId())== false) {
			throw new Exception("El cliente no existe");
		}
		findById(entity.getCustId()).ifPresent(customer->{
			if(customer.getAccounts() != null && customer.getAccounts().isEmpty()== false) {
				throw new RuntimeException("El cliente tiene cuentas asociadas");
			}
			if(customer.getRegisteredAccounts() != null && customer.getRegisteredAccounts().isEmpty()== false) {
				throw new RuntimeException("El cliente tiene cuentas registradas y asociadas");
			}
		});
		
		customerRepository.deleteById(entity.getCustId());
	}	

	@Override
	@Transactional(readOnly = false,propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public void deleteById(Integer id) throws Exception {
		// TODO Auto-generated method stub
		if(id == null) {
			throw new Exception("El id es nulo");
		}
		if(customerRepository.existsById(id)== false) {
			throw new Exception("El cliente no existe");
		}
		
		delete(customerRepository.findById(id).get());
	}

	@Override
	public void validate(Customer entity) throws Exception {
		// TODO Auto-generated method stub
		
	}
}
